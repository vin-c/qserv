# See http://docs.openstack.org/developer/heat/template_guide/hot_spec.html

heat_template_version: 2015-10-15

description: Launch VMs for qserv tests

parameters:
    nb_instances:
        description: Number of instances to start
        label: Number of instances to start
        type: number
    prefix:
        description: Resource prefix
        label: Resource prefix
        type: string
    key_name:
        description: Name of an existing key pair to use for the instance
        label: Key Name
        type: string
        constraints:
            - custom_constraint: nova.keypair
    flavor_1c_2g:
        description: Small flavor (typically 1c/2g)
        label: Flavor ID
        type: string
    flavor_2c_2g:
        description: Medium flavor (typically 2c/2g)
        label: Flavor ID
        type: string
    flavor_2c_4g:
        description: Large flavor (typically 2c/4g)
        label: Flavor ID
        type: string
    flavor_4c_8g:
        description: XLarge flavor (typically 4c/8g)
        label: Flavor ID
        type: string
    image_id:
        description: UUID of image
        label: Instance ID
        type: string
    network_name:
        description: Name of the network to connect to
        label: Network Name
        type: string
        constraints:
            - custom_constraint: neutron.network
    subnet_name:
        description: Name of the subnet to connect to
        label: Subnet Name
        type: string
        constraints:
            - custom_constraint: neutron.subnet
    public_network:
        description: Public network id
        type: string
    mount_point:
        description: Name of the mount point
        label: Mount point
        type: string
    volumes:
        description: List of ids and volume_ids
        type: comma_delimited_list

resources:
## Worker Cluster Group ##
    worker_group:
        type: OS::Heat::ResourceGroup
        depends_on: dr_instance
        properties:
            count: { get_param: nb_instances }
            resource_def: 
                type: OS::Qserv::Worker
                properties:
                    key_name: { get_param: key_name }
                    flavor_id: { get_param: flavor_2c_4g }
                    image_id: { get_param: image_id }
                    prefix: { get_param: prefix }
                    network_name: { get_param: network_name }
                    subnet_name: { get_param: subnet_name }
                    mount_point: { get_param: mount_point }
                    docker_registry_ip: { get_attr: [ dr_instance, first_address ] }
                    volumes: { get_param: volumes }
                    index: "%index%"
## SSH Gateway ##
    gw_instance:
        type: OS::Nova::Server
        properties:
            key_name: { get_param: key_name }
            flavor: { get_param: flavor_1c_2g }
            image: { get_param: image_id }
            name: 
                str_replace: 
                    template: $PREFIX-gateway
                    params:
                        $PREFIX: { get_param: prefix }

            networks:
                - port: { get_resource: gw_port }
            user_data: { get_file: cloud-config-gw.yaml }
            user_data_format: RAW
    gw_port:
        type: OS::Neutron::Port
        properties:
            network: { get_param: network_name }
            fixed_ips:
                - subnet_id: { get_param: subnet_name }
    gw_fip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network_id: { get_param: public_network }
            port_id: { get_resource: gw_port } 

## Docker Registry Mirror ##
    dr_instance:
        type: OS::Nova::Server
        properties:
            key_name: { get_param: key_name }
            flavor: { get_param: flavor_2c_2g }
            image: { get_param: image_id }
            networks:
                - port: { get_resource: dr_port }
            user_data: { get_file: cloud-config-dr.yaml }
            user_data_format: RAW
            name: 
                str_replace: 
                    template: $PREFIX-docker-registry
                    params:
                        $PREFIX: { get_param: prefix }
    dr_port:
        type: OS::Neutron::Port
        properties:
            network: { get_param: network_name }
            fixed_ips:
                - subnet_id: { get_param: subnet_name }

outputs:
    all_ips:
        description: All instance IPs
        value: { get_attr: [ worker_group, instance_ip ] }
    r0_port:
        description: instance_0 port
        value: { get_attr: [ worker_group, resource.0.port ] }
    gateway_ip:
        description: IP to connect to
        value: { get_attr: [ gw_fip, floating_ip_address ] }
    docker_registry_ip:
        description: Local docker-registry IP
        value: { get_attr: [ dr_instance, first_address ] }
    volume_0:
        description: Volume_0 ID
        value: { get_param: [ volumes, 0 ] }
# EOF
